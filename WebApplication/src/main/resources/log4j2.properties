#name=PropertiesConfig
#property.filename = logs
#appenders = console, file
#
#appender.console.type = Console
#appender.console.name = STDOUT
#appender.console.layout.type = PatternLayout
#appender.console.layout.pattern = [%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n
#appender.file.type = File
#appender.file.name = LOGFILE
#appender.file.fileName=${filename}/propertieslogs.log
#appender.file.layout.type=PatternLayout
#appender.file.layout.pattern=[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n
#
#rootLogger.level = debug
#rootLogger.appenderRefs = stdout
#rootLogger.appenderRef.stdout.ref = STDOUT

#log4j.rootLogger = DEBUG, stdout, file
#
#log4j.appender.stdout = org.apache.log4j.ConsoleAppender
#log4j.appender.stdout.Target = System.out
#log4j.appender.stdout.layout = org.apache.log4j.PatternLayout
#log4j.appender.stdout.layout.ConversionPattern = %d{yy-MM-dd HH:mm:ss} %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable
#
#log4j.appender.file = org.apache.log4j.RollingFileAppender
#
#log4j.appender.file.File = $(catalina.home)/logs/Family-tracking-log
#log4j.appender.file.MaxFileSize = 100MB
#log4j.appender.file.MaxBackupIndex = 10
#log4j.appender.file.layout = org.apache.log4j.PatternLayout
#log4j.appender.file.layout.ConversionPattern = d{yy-MM-dd HH:mm:ss} %-5level [%t] %C{1.}: %m%n


#logging.level.root = INFO
#logging.file = Family-tracking-log
#logging.pattern.console = "%d{yy-MM-dd HH:mm:ss} %highlight(%-5level) [%blue(%t)] %yellow(%C{1.}): %msg%n%throwable"
#logging.pattern.file = "%d{yy-MM-dd HH:mm:ss} %-5level [%t] %C{1.}: %m%n"

#log4j.rootLogger = WARN , stdout, cslLog
#
#log4j.logger.perfLog = WARN, perfLog
#log4j.additivity.perfLog = false
#
#log4j.appender.perfLog = org.apache.log4j.RollingFileAppender
#log4j.appender.perfLog.File = ${GRAILS_HOME}/logs/csl.log
#log4j.appender.perfLog.Append = true
#log4j.appender.perfLog.ImmediateFlush = true
#
#log4j.appender.perfLog.MaxFileSize=200MB
#log4j.appender.perfLog.MaxBackupIndex = 1
#
#name=PropertiesConfig
#property.filename = logs
#
#
#filters = threshold
#filter.threshold.type = ThresholdFilter
#filter.threshold.level = info
#
#appenders = console, file
#
#appender.console.type = Console
#appender.console.layout.type = PatternLayout
#appender.console.name = STDOUT
#pender.console.layout.pattern = %d{yy-MM-dd HH:mm:ss} %-5level [%t] %C{1.}: %msg%n%throwable
#
#appender.file.type = RollingFile
#appender.file.name = RollingFile
#appender.file.fileName = Family-tracking-log.log
#appender.file.filePattern = debug-backup-%d{MM-dd-yy_HH-mm-ss}-%i.log.gz
#appender.file.layout.type = PatternLayout
#appender.file.layout.pattern = %d{yy-MM-dd HH:mm:ss} %-5level [%t] %C{1.}: %m%n
#appender.file.policies.type = Policies
#appender.file.policies.time.type = TimeBasedTriggeringPolicy
#appender.file.policies.time.interval = 1
#appender.file.policies.time.modulate = true
#appender.file.policies.size.type = SizeBasedTriggeringPolicy
#appender.file.policies.size.size = 100MB
#appender.file.strategy.type = DefaultRolloverStrategy
#appender.file.strategy.max = 20
#
#
#loggers = file
#logger.file.name = com.example.familyTracking
#logger.file.level = info
#logger.file.additivity = false
#logger.file.appenderRef.rolling.ref = RollingFile
#
#
#rootLogger.level = info
#rootLogger.appenderRefs = stdout
#rootLogger.appenderRef.stdout.ref = STDOUT

status = info
name= properties_configuration

# Give directory path where log files should get stored
property.logFilename= Family-tracking-log.log

# ConsoleAppender will print logs on console
appender.console.type = Console
appender.console.name = consoleLogger
appender.console.target = SYSTEM_OUT
appender.console.layout.type = PatternLayout

# Specify the pattern of the logs
appender.console.layout.pattern = %d{yy-MM-dd HH:mm:ss} %-5level [%t] %C{1.}: %msg%n%throwable


# RollingFileAppender will print logs in file which can be rotated based on time or size
appender.rolling.type = RollingFile
appender.rolling.name = fileLogger
appender.rolling.fileName= ${logFilename}
appender.rolling.filePattern= /archive/archive-log_%d{yyyyMMdd}.log.gz
appender.rolling.layout.type = PatternLayout
appender.rolling.layout.pattern = %d{yy-MM-dd HH:mm:ss} %-5level [%t] %C{1.}: %msg%n
appender.rolling.policies.type = Policies

# Rotate log file each day and keep 30 days worth
appender.rolling.policies.time.type = TimeBasedTriggeringPolicy
appender.rolling.policies.time.interval = 1
appender.rolling.policies.time.modulate = true
appender.rolling.strategy.type = DefaultRolloverStrategy
appender.rolling.strategy.delete.type = Delete
appender.rolling.strategy.delete.basePath = /archive
appender.rolling.strategy.delete.maxDepth = 1
appender.rolling.strategy.delete.ifLastModified.type = IfLastModified
# Delete files older than 30 days
appender.rolling.strategy.delete.ifLastModified.age = 30d

# Mention package name here in place of example. Classes in this package or subpackages will use ConsoleAppender and RollingFileAppender for logging
logger.rolling.name = com.x
logger.rolling.level = info
logger.rolling.additivity = false
logger.rolling.appenderRef.rolling.ref = fileLogger
logger.rolling.appenderRef.console.ref = consoleLogger

# Configure root logger for logging error logs in classes which are in package other than above specified package
rootLogger.level = info
rootLogger.additivity = false
rootLogger.appenderRef.rolling.ref = fileLogger
rootLogger.appenderRef.console.ref = consoleLogger
